// Generated by CodiumAI

import { fireEvent, render } from "@testing-library/react";
import Avatar from "./Avatar";
import { handleFallBackImage, handleImageError } from "utils/helpers/image";

describe("code snippet", () => {
  // Renders avatar with provided image source
  it("should render avatar with provided image source", () => {
    const { getByAltText } = render(
      <Avatar src="test.jpg" alt="test avatar" />,
    );
    const img = getByAltText("test avatar");
    expect(img).toHaveAttribute("src", "test.jpg");
  });

  // Uses default alt text when none is provided
  it("should use default alt text when none is provided", () => {
    const { getByAltText } = render(<Avatar src="test.jpg" />);
    const img = getByAltText("avatar");
    expect(img).toBeInTheDocument();
  });

  // Uses default size when none is provided
  it("should use default size when none is provided", () => {
    const { getByAltText } = render(<Avatar src="test.jpg" />);
    const img = getByAltText("avatar");
    expect(img).toHaveAttribute("size", "large");
  });

  // Calls handleImageError on image load error
  it("should call handleImageError on image load error", () => {
    const { getByAltText } = render(<Avatar src="test.jpg" />);
    const img = getByAltText("avatar");
    fireEvent.error(img);
    expect(handleImageError).toHaveBeenCalled();
  });

  // Uses fallback image when src is null or undefined
  it("should use fallback image when src is null or undefined", () => {
    //@ts-ignore
    const { getByAltText } = render(<Avatar src={null} />);
    const img = getByAltText("avatar");
    expect(img).toHaveAttribute("src", handleFallBackImage());
  });

  // Handles empty string as src
  it("should handle empty string as src", () => {
    const { getByAltText } = render(<Avatar src="" />);
    const img = getByAltText("avatar");
    expect(img).toHaveAttribute("src", handleFallBackImage());
  });

  // Handles null as src
  it("should handle null as src", () => {
     //@ts-ignore
    const { getByAltText } = render(<Avatar src={null} />);
    const img = getByAltText("avatar");
    expect(img).toHaveAttribute("src", handleFallBackImage());
  });

  // Handles undefined as src
  it("should handle undefined as src", () => {
     //@ts-ignore
    const { getByAltText } = render(<Avatar src={undefined} />);
    const img = getByAltText("avatar");
    expect(img).toHaveAttribute("src", handleFallBackImage());
  });

  // Handles non-string values for src
  it("should handle non-string values for src", () => {
     //@ts-ignore
    const { getByAltText } = render(<Avatar src={123} />);
    const img = getByAltText("avatar");
    expect(img).toHaveAttribute("src", handleFallBackImage());
  });

  // Handles non-string values for alt
  it("should handle non-string values for alt", () => {
     //@ts-ignore
    const { getByAltText } = render(<Avatar src="test.jpg" alt={123} />);
    const img = getByAltText("123");
    expect(img).toBeInTheDocument();
  });

  // Verifies StyledAvatar receives correct props
  it("should verify StyledAvatar receives correct props", () => {
    const { getByAltText } = render(
      <Avatar src="test.jpg" alt="test avatar" size="small" />,
    );
    const img = getByAltText("test avatar");
    expect(img).toHaveAttribute("src", "test.jpg");
    expect(img).toHaveAttribute("alt", "test avatar");
    expect(img).toHaveAttribute("size", "small");
  });

  // Ensures handleFallBackImage returns a valid image source
  it("should ensure handleFallBackImage returns a valid image source", () => {
    const fallbackSrc = handleFallBackImage();
    expect(fallbackSrc).toMatch(/https?:\/\/.+\.(jpg|jpeg|png|gif)$/);
  });
});
